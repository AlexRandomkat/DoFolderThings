package stuff;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

/**
 * Class for doing stuff with directories/folders
 */
public class Folder extends File {
	private static final long serialVersionUID = 1L;
	File[] contents;
	private static ArrayList<String> dntExtensions = new ArrayList<String>();
	private static String tag;

	/**
	 * Creates a new Folder that represents a folder/directory
	 * 
	 * @param dir
	 *            The location of the folder
	 */
	Folder(File dir) throws IOException {
		super(dir.getAbsolutePath());
		contents = this.listFiles();
	}

	/**
	 * Creates a new Folder that represents a folder/directory
	 * 
	 * @param dir
	 *            The location of the folder
	 */
	Folder(String dir) {
		super(dir);
		contents = this.listFiles();
	}

	/**
	 * A static method for getting the file type of a file
	 * 
	 * @param f
	 *            A file
	 * @return A string of the file extension (e.g. ".txt" or ".png")
	 */
	public static String getExtension(File f) {
		if (f.isDirectory()) {
			return "";
		}
		String path = f.getAbsolutePath();
		path = path.substring(path.lastIndexOf("."), path.length());
		return path;

	}

	/**
	 * A static method for getting the file type of a file
	 * 
	 * @param f
	 *            A file
	 * @return A string of the file extension (e.g. ".txt" or ".png")
	 */
	public String getExtension() {
		if (!this.exists()) {
			System.out.println(this.getAbsolutePath() + " does not exist");
			return "";
		}
		if (this.isDirectory()) {
			return "";
		}
		String path = this.getAbsolutePath();
		path = path.substring(path.lastIndexOf("."), path.length());
		return path;
	}

	/**
	 * Renames files in this Folder using names generated by
	 * Random.Strings.shuffledAlphanumericStrings(n,length) and adds a tag if one
	 * was initialized.
	 * 
	 * @throws Random.notEnoughCombinations
	 *             (don't worry about it, it probably won't throw this if I did my
	 *             math right...)
	 */
	public void shuffleFileNames() throws Random.notEnoughCombinations {
		if (!this.exists()) {
			System.out.println(this.getAbsolutePath() + " does not exist");
			return;
		}
		// find minimum suitable name length
		int length;
		if (contents.length > 0) {
			length = 1 + (int) (Math.log10(contents.length) / Math.log10(36));
		} else {
			// prevents negative infinity. That's typically good.
			length = 0;
		}

		// create file names
		String names[] = Random.Strings.shuffledAlphanumericStrings(contents.length, length);

		// add tag to file name, if one is set.
		if (tag != null) {
			for (int i = 0; i < names.length; i++) {
				names[i] = tag + names[i];
			}
		}
		
		//TODO: Just add unique tag instead of moving files into a new folder. Verify to make sure tag is unique.
		
		// create temp directory
		String directory = this.getAbsolutePath() + "\\temp\\";
		File temp = new File(directory);
		temp.mkdirs();

		// put files in temp directory while changing names
		for (int i = 0; i < contents.length; i++) {
			if (contents[i].isFile() && !dntExtensions.contains(getExtension(contents[i]))) {
				contents[i].renameTo(new File(directory + names[i] + getExtension(contents[i])));
			}
		}

		// move files in temp directory back to parent dir
		contents = temp.listFiles();
		for (int i = 0; i < contents.length; i++) {
			contents[i].renameTo(new File(this.getAbsolutePath() + "\\" + names[i] + getExtension(contents[i])));
		}

		// delete temp directory and reset contents to this.listFiles()
		temp.delete();
		contents = this.listFiles();
	}

	/**
	 * calls shuffleFileNames() on this Folder and all child directories.
	 * 
	 * @throws Random.notEnoughCombinations
	 *             (don't worry about it, it probably won't throw this if I did my
	 *             math right...)
	 */
	public void shuffleFileNamesChild() throws Random.notEnoughCombinations, IOException {
		if (!this.exists()) {
			System.out.println(this.getAbsolutePath() + " does not exist");
			return;
		}
		// shuffle files
		System.out.println("Shuffling contents of " + this.getAbsolutePath());
		shuffleFileNames();

		// shuffle files in folders iteratively
		for (File f : contents) {
			if (f.isDirectory()) {
				Folder folder = new Folder(f);
				folder.shuffleFileNamesChild();
			}
		}
	}

	/**
	 * Initializes a tag for all Folder objects.
	 * 
	 * @param tag
	 */
	public static void setFolderClassTag(String tag) {
		Folder.tag = tag;
	}

	/**
	 * Adds a tag to files in a Folder. Make sure that after adding the tag, the
	 * program will not end up overwriting files. Otherwise, bad stuff could happen.
	 * 
	 * @param tag
	 *            A string to be added at the front of filenames
	 */
	public void addTagToContents(String tag) {
		/*
		 * Make sure that after adding the tag, the program will not end up overwriting
		 * something else.
		 */
		if (!this.exists()) {
			System.out.println(this.getAbsolutePath() + " does not exist");
			return;
		}
		// create temp directory
		String directory = this.getAbsolutePath() + "\\temp\\";
		File temp = new File(directory);
		temp.mkdirs();

		// move files to temp directory and add tag
		for (int i = 0; i < contents.length; i++) {
			if (contents[i].isFile() && !dntExtensions.contains(getExtension(contents[i]))) {
				contents[i].renameTo(new File(directory + tag + contents[i].getName()));
			}
		}

		// move files in temp directory back to parent dir
		contents = temp.listFiles();
		for (int i = 0; i < contents.length; i++) {
			contents[i].renameTo(new File(this.getAbsolutePath() + "\\" + contents[i].getName()));
		}

		// delete temp folder and reset contents
		temp.delete();
		contents = this.listFiles();
	}

	/**
	 * calls addTagToContents(tag) on this Folder and all child directories.
	 */
	public void addTagToContentsChild(String tag) throws IOException {
		if (!this.exists()) {
			System.out.println(this.getAbsolutePath() + " does not exist");
			return;
		}
		// add tag to files
		System.out.println("Adding tag to contents of " + this.getAbsolutePath());
		addTagToContents(tag);

		// add tags to files in folders iteratively
		for (File f : contents) {
			if (f.isDirectory()) {
				Folder folder = new Folder(f);
				folder.addTagToContentsChild(tag);
			}
		}
	}

	/**
	 * Ignores certain filetypes when using methods such as addTagToContents(tag)
	 * and shuffleFileNames().
	 * 
	 * @param extension
	 *            The file type to be ignored (e.g.".wav" or ".tmp").
	 */
	public static void extensionIgnoresFolderMethods(String extension) {
		dntExtensions.add(extension);
	}
}